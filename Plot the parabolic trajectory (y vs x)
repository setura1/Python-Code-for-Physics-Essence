import numpy as np
import matplotlib.pyplot as plt

# 1. パラメータの設定 / Define parameters
v0 = 20  # 初速度 (m/s) / Initial velocity (m/s)
theta = np.radians(45)  # 角度 (degrees to radians) / Launch angle (radians)
g = 9.81  # 重力加速度 (m/s^2) / Gravitational acceleration (m/s^2)

# 2. 弾道方程式を計算 / Calculate parabolic trajectory equation
# x の範囲を設定 (最大 x は飛行距離) / Define range for x (maximum x is the flight range)
x_max = (v0**2 * np.sin(2 * theta)) / g  # 飛行距離 (range) / Calculate maximum flight distance
x_values = np.linspace(0, x_max, 500)

# 3. y の方程式を計算 (軌道方程式) / Compute y based on the parabolic trajectory equation
y_values = (-g / (2 * v0**2 * np.cos(theta)**2)) * x_values**2 + np.tan(theta) * x_values

# 4. 時間の範囲を設定 / Time range for the simulation
t_flight = 2 * v0 * np.sin(theta) / g  # 飛行時間 / Total flight time
t_values = np.linspace(0, t_flight, 500)

# 5. 速度の x 方向と y 方向の計算 / Compute velocity in x and y directions
vx_t = v0 * np.cos(theta)  # Vx = V0 * cos(theta) -> constant in x-direction
vy_t = v0 * np.sin(theta) - g * t_values  # Vy = V0 * sin(theta) - gt in y-direction

# 6. 位置の x 方向と y 方向の計算 / Compute position in x and y directions
x_t = v0 * np.cos(theta) * t_values  # x = V0 * cos(theta) * t
y_t = v0 * np.sin(theta) * t_values - 0.5 * g * t_values**2  # y = V0 * sin(theta) * t - (1/2) g t^2

# 7. プロットの設定 / Set up the plot
plt.figure(figsize=(12, 10))

# 軌道のプロット / Plot the parabolic trajectory (y vs x)
plt.subplot(3, 1, 1)
plt.plot(x_values, y_values, label="Projectile Trajectory (y vs x)", color="blue")
plt.title("Projectile Trajectory (y vs x)")
plt.xlabel("x position [m]")
plt.ylabel("y position [m]")
plt.grid(True)
plt.legend()

# 速度のプロット / Plot velocity (Vx, Vy over time)
plt.subplot(3, 1, 2)
plt.plot(t_values, vx_t * np.ones_like(t_values), label="Vx (x direction)", color="blue", linestyle='--')
plt.plot(t_values, vy_t, label="Vy (y direction)", color="red")
plt.title("Velocity in x and y directions over Time")
plt.xlabel("Time t [s]")
plt.ylabel("Velocity [m/s]")
plt.grid(True)
plt.legend()

# 位置のプロット / Plot position (x, y over time)
plt.subplot(3, 1, 3)
plt.plot(t_values, x_t, label="x position", color="blue")
plt.plot(t_values, y_t, label="y position", color="green")
plt.title("Position in x and y directions over Time")
plt.xlabel("Time t [s]")
plt.ylabel("Position [m]")
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()
